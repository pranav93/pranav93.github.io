<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alaGeek Theme on Pranav P. Ambhore</title>
    <link>/</link>
    <description>Recent content in alaGeek Theme on Pranav P. Ambhore</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fan In/Out Pattern In Golang</title>
      <link>/blog/golang-fan-inout-pattern/</link>
      <pubDate>Fri, 07 Feb 2020 19:01:09 +0530</pubDate>
      
      <guid>/blog/golang-fan-inout-pattern/</guid>
      <description>Golang is absolutely gorgeous when it comes to concurrency. I was trying to implement fan in/out pattern in it. Following is the result.
package main import &amp;#34;fmt&amp;#34; func main() { var numOfWorkers int // How many workers do you want? 	fmt.Printf(&amp;#34;Enter the number of workers to spawn : &amp;#34;) fmt.Scanf(&amp;#34;%d\n&amp;#34;, &amp;amp;numOfWorkers) c := make(chan int) outChanArr := make([]chan map[int]int, numOfWorkers) done := make(chan bool) collateChan := make(chan map[int]int) // generate some values 	go genFunc(c) for s := 0; s &amp;lt; numOfWorkers; s++ { // calculate the factorials 	outChanArr[s] = fact(c, done, s) } // collate results from all channels 	collateFunc(done, collateChan, outChanArr.</description>
    </item>
    
    <item>
      <title>Alembic For The Database Schema Migrations</title>
      <link>/blog/alembic-for-the-database-schema-migrations/</link>
      <pubDate>Sat, 09 Nov 2019 19:01:09 +0530</pubDate>
      
      <guid>/blog/alembic-for-the-database-schema-migrations/</guid>
      <description>Using just sql scripts for managing database schema migrations is alright. But in that case we have to explicitly create a system where we have to keep track of the sequences of the scripts (one of the reasons: foreign key dependencies). While in development environment, if we want to check whether existing function/method code compatible with earlier table schema, we have to manually write some commands in our favorite db client.</description>
    </item>
    
    <item>
      <title>Curious Case Of Mysql And Emojis</title>
      <link>/blog/curious-case-of-mysql-and-emojis/</link>
      <pubDate>Sun, 05 Aug 2018 19:01:09 +0530</pubDate>
      
      <guid>/blog/curious-case-of-mysql-and-emojis/</guid>
      <description>I was working on emoji support of legacy application written in Python with MySQL as database. And I was unable to save emojis on it, though encoding was perfect i.e. UTF8 (Or I though it was ðŸ˜‚). Turns out I was wrong.
After going through docs of mysql, which were explaining encoding UTF8, I was amused to see that it in fact only supports 3 bytes for a character. And emojis, well they take 4 bytes.</description>
    </item>
    
    <item>
      <title>Pushing Error Traceback On Slack Channel In Python</title>
      <link>/blog/pushing-stack-trace-of-error-on-slack-channel/</link>
      <pubDate>Sun, 13 Nov 2016 19:01:09 +0530</pubDate>
      
      <guid>/blog/pushing-stack-trace-of-error-on-slack-channel/</guid>
      <description>Wouldn&amp;rsquo;t it be awesome if we could get the error trace on slack. For this first of all we&amp;rsquo;ll have to write a handler that will compose the message the way slack likes.
import logging import slackweb class SlackHandler(logging.Handler): def __init__(self, url, channel, username, icon_emoji): logging.Handler.__init__(self) self.slack_obj = slackweb.Slack(url=url) self.channel = channel self.username = username self.icon_emoji = icon_emoji def emit(self, record): self.slack_obj.notify( text=record.exc_text or record.msg, channel=&amp;#34;#{}&amp;#34;.format(self.channel), username=self.username, icon_emoji=self.icon_emoji ) # Usage: Add handler as, # &amp;#39;slack_jabber&amp;#39;: { # &amp;#39;class&amp;#39;: &amp;#39;SlackHandler&amp;#39;, # &amp;#39;url&amp;#39;: &amp;#39;https://hooks.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description> Hi, Iâ€™m a developer mainly working on python, flask, golang, tornado, javascript(reactjs/redux)! In spare time I play FIFA (Origin ID Pnv1om), watch movies, and get my hands dirty with nodejs/go/a-buzzword-lang/framework-that-im-doing-hello-world-in :D  </description>
    </item>
    
  </channel>
</rss>
